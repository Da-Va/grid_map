cmake_minimum_required(VERSION 3.5.1)
project(grid_map_core)

set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
add_compile_options(-Wall -Wextra -Wpedantic)
# set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

## Find catkin macros and libraries
# find_package(catkin QUIET)

## Define Eigen addons. 
# include(cmake/${PROJECT_NAME}-extras.cmake)

## System dependencies are found with CMake's conventions
#find_package(Eigen3 REQUIRED)
# Solution to find Eigen3 with Saucy.
find_package(Eigen3 QUIET)
if(NOT EIGEN3_FOUND)
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(EIGEN3 REQUIRED eigen3)
  set(EIGEN3_INCLUDE_DIR ${EIGEN3_INCLUDE_DIRS})
endif()

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
# if(CATKIN_FOUND)
#   catkin_package(
#     INCLUDE_DIRS
#       include
#       ${EIGEN3_INCLUDE_DIR}
#     LIBRARIES
#       ${PROJECT_NAME}
#     CATKIN_DEPENDS
#     DEPENDS
#       #Eigen3
#     CFG_EXTRAS
#       ${PROJECT_NAME}-extras.cmake
#   )
# endif()

###########
## Build ##
###########

## Specify additional locations of header files
include_directories(
  include
  SYSTEM
    # ${catkin_INCLUDE_DIRS}
    # ${EIGEN3_INCLUDE_DIR}
)

## Declare a cpp library
add_library(${PROJECT_NAME}
   src/GridMap.cpp
   src/GridMapMath.cpp
   src/SubmapGeometry.cpp
   src/BufferRegion.cpp
   src/Polygon.cpp
   src/CubicInterpolation.cpp
   src/iterators/GridMapIterator.cpp
   src/iterators/SubmapIterator.cpp
   src/iterators/CircleIterator.cpp
   src/iterators/EllipseIterator.cpp
   src/iterators/SpiralIterator.cpp
   src/iterators/PolygonIterator.cpp
   src/iterators/LineIterator.cpp
   src/iterators/SlidingWindowIterator.cpp
)

target_include_directories(${PROJECT_NAME} PUBLIC include)
target_link_libraries(${PROJECT_NAME}
  Eigen3::Eigen
  # ${catkin_LIBRARIES}
)

set(EIGEN_FUNCTORS_PLUGIN_PATH "grid_map_core/eigen_plugins/FunctorsPlugin.hpp")
if (EIGEN_FUNCTORS_PLUGIN)
  if (NOT EIGEN_FUNCTORS_PLUGIN STREQUAL EIGEN_FUNCTORS_PLUGIN_PATH)
    MESSAGE(FATAL_ERROR "EIGEN_FUNCTORS_PLUGIN already defined!")
  endif ()
else (EIGEN_FUNCTORS_PLUGIN)
  target_compile_definitions(${PROJECT_NAME} PUBLIC -DEIGEN_FUNCTORS_PLUGIN=\"${EIGEN_FUNCTORS_PLUGIN_PATH}\")
endif (EIGEN_FUNCTORS_PLUGIN)

set(EIGEN_DENSEBASE_PLUGIN_PATH "grid_map_core/eigen_plugins/DenseBasePlugin.hpp")
if (EIGEN_DENSEBASE_PLUGIN)
  if (NOT EIGEN_DENSEBASE_PLUGIN STREQUAL EIGEN_DENSEBASE_PLUGIN_PATH)
    MESSAGE(FATAL_ERROR "EIGEN_DENSEBASE_PLUGIN already defined!")
  endif ()
else (EIGEN_DENSEBASE_PLUGIN)
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DEIGEN_DENSEBASE_PLUGIN=\"${EIGEN_DENSEBASE_PLUGIN_PATH}\")
endif (EIGEN_DENSEBASE_PLUGIN)


#############
## Install ##
#############

# if(CATKIN_FOUND)
#   # Mark executables and/or libraries for installation
#   install(
#     TARGETS ${PROJECT_NAME}
#     ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#     LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#     RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
#   )

#   # Mark cpp header files for installation
#   install(
#     DIRECTORY include/${PROJECT_NAME}/
#     DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#     FILES_MATCHING PATTERN "*.hpp"
#   )

#   # Mark other files for installation
#   install(
#     DIRECTORY doc
#     DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
#   )
# endif()

# #############
# ## Testing ##
# #############

# # if(CATKIN_ENABLE_TESTING)
# #   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")

# #   ## Add gtest based cpp test target and link libraries
# #   catkin_add_gtest(${PROJECT_NAME}-test
# #     test/test_grid_map_core.cpp
# #     test/test_helpers.cpp
# #     test/CubicConvolutionInterpolationTest.cpp
# #     test/CubicInterpolationTest.cpp
# #     test/GridMapMathTest.cpp
# #     test/GridMapTest.cpp
# #     test/GridMapIteratorTest.cpp
# #     test/LineIteratorTest.cpp
# #     test/EllipseIteratorTest.cpp
# #     test/SubmapIteratorTest.cpp
# #     test/PolygonIteratorTest.cpp
# #     test/PolygonTest.cpp
# #     test/EigenPluginsTest.cpp
# #     test/SpiralIteratorTest.cpp
# #     test/SlidingWindowIteratorTest.cpp
# #   )
# #   target_include_directories(${PROJECT_NAME}-test PRIVATE
# #     include
# #   )
# #   target_include_directories(${PROJECT_NAME}-test SYSTEM PUBLIC
# #     ${catkin_INCLUDE_DIRS}
# #     ${EIGEN3_INCLUDE_DIR}
# #   )
# #   target_link_libraries(${PROJECT_NAME}-test
# #     ${PROJECT_NAME}
# #   )

# #   ###################
# #   ## Code_coverage ##
# #   ###################
# #   find_package(cmake_code_coverage QUIET)
# #   if(cmake_code_coverage_FOUND)
# #     add_gtest_coverage(
# #       TEST_BUILD_TARGETS
# #         ${PROJECT_NAME}-test
# #     )
# #   endif()
# # endif()

# #################
# ## Clang_tools ##
# #################
# find_package(cmake_clang_tools QUIET)
# if(cmake_clang_tools_FOUND)
#   add_default_clang_tooling(
#     DISABLE_CLANG_FORMAT
#   )
# endif(cmake_clang_tools_FOUND)